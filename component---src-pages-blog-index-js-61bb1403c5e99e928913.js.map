{"version":3,"file":"component---src-pages-blog-index-js-61bb1403c5e99e928913.js","mappings":"gNAuCA,EA/BmB,SAAC,GAAsC,IAGpDA,EAHgBC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxC,GAAoCC,EAAAA,EAAAA,WAAS,GAAtCC,EAAP,KAAmBC,EAAnB,KAUA,MAPc,SAAVL,EACFF,ECXc,6BDaG,WAAVE,IACPF,ECbgB,gCDiBhB,0BACEQ,KAAK,SACLC,UAAcC,8BAAcV,EAAnB,KAAkCM,EClB3B,iCDkByD,IACzEK,QAAS,WACHL,EACFF,EAASH,GAETE,EAAMF,GAERM,GAAeD,IAEjB,YAAWL,EACX,eAAcK,EAAWM,YAExBX,IEfP,EAZuB,SAAC,GAAyC,IAAvCY,EAAsC,EAAtCA,QAASX,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC/C,OACE,sBAAIK,UCRU,8BDSXI,EAAQC,KAAI,SAACC,GAAD,OACX,sBAAIN,UCTU,mCDUZ,gBAAC,EAAD,CAAMR,KAAMc,EAAKb,MAAOA,EAAOC,MAAOA,EAAOC,SAAUA,UE0FjE,EA5Fa,SAAC,GAAsB,IAArBY,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SACbC,EAAWF,EAAKG,OAAOC,MAEvBC,EAAiB,IAAIC,IAC3BJ,EAASK,SAAQ,SAAAC,GACfA,EAAKC,YAAYC,KAAKH,SAAQ,SAAAR,GAC5BM,EAAeM,IAAIZ,SAIvB,OAAgDV,EAAAA,EAAAA,UAAS,IAAIiB,KAAtDM,EAAP,KAAyBC,EAAzB,KACA,GAA4CxB,EAAAA,EAAAA,UAASa,GAA9CY,EAAP,KAAuBC,EAAvB,KAeMC,EAAoB,SAAAR,GAExB,OAA8B,IAA1BI,EAAiBK,MAKdT,EAAKC,YAAYC,KAAKQ,MAAK,SAAAnB,GAAG,OAAIa,EAAiBO,IAAIpB,OAGhE,OACE,gBAAC,IAAD,CACEqB,MAAM,wBACNC,YAAY,iCACZpB,SAAUA,GAEV,gBAAC,IAAD,CACEqB,MAAO,EACPC,SAAS,cAFX,QAMA,gBAAC,EAAD,CACE1B,QAAS2B,MAAMC,KAAKpB,GAAgBqB,OACpCxC,MAAM,SACNC,MAtCkB,SAAAwC,GACtB,IAAMC,EAAgBhB,EAAiBD,IAAIgB,GAC3Cd,EAAoBe,GACpBb,EAAkBb,EAAS2B,OAAOb,KAoC9B5B,SAjCqB,SAAAuC,GACzB,IAAMC,EAAgBhB,EACtBgB,EAAcE,OAAOH,GACrBd,EAAoBe,GACpBb,EAAkBb,EAAS2B,OAAOb,OA+BhC,qBAAG,YAAU,SAAS,cAAY,QAC/BF,EAAeiB,OADlB,IACqD,IAA1BjB,EAAeiB,OAAe,OAAS,QADlE,UAGA,sBAAItC,UClEY,kCDmEbqB,EAAehB,KAAI,SAACU,GAAD,OAClB,sBAAIf,UCnEI,6BDoEN,0BACE,gBAAC,KAAD,CAAMuC,GAAE,SAAWxB,EAAKyB,MACrBzB,EAAKC,YAAYW,QAGtB,yBAAOZ,EAAKC,YAAYyB,KAAxB,MAAkC1B,EAAK2B,WAAvC,gBACA,yBAAI3B,EAAKC,YAAYY,aAAeb,EAAK4B","sources":["webpack://meganesulli.com/./src/components/chip/index.js","webpack://meganesulli.com/./src/components/chip/styles.module.css","webpack://meganesulli.com/./src/components/post-filter-list/index.js","webpack://meganesulli.com/./src/components/post-filter-list/styles.module.css","webpack://meganesulli.com/./src/pages/blog/index.js","webpack://meganesulli.com/./src/pages/blog/index.module.css"],"sourcesContent":["import React, { useState } from \"react\"\nimport {\n  chip as chipStyles,\n  selected as selectedStyles,\n  blue as blueStyles,\n  orange as orangeStyles,\n} from \"./styles.module.css\"\n\nconst ToggleChip = ({ text, color, onAdd, onRemove }) => {\n  const [isSelected, setIsSelected] = useState(false)\n\n  let colorStyles\n  if (color === 'blue') {\n    colorStyles = blueStyles\n  }\n  else if (color === 'orange') {\n    colorStyles = orangeStyles\n  }\n\n  return (\n    <button\n      type=\"button\"\n      className={`${chipStyles} ${colorStyles} ${isSelected ? selectedStyles : \"\"}`}\n      onClick={() => {\n        if (isSelected) {\n          onRemove(text)\n        } else {\n          onAdd(text)\n        }\n        setIsSelected(!isSelected)\n      }}\n      data-text={text}\n      aria-pressed={isSelected.toString()}\n    >\n      {text}\n    </button>\n  )\n}\n\nexport default ToggleChip\n","// extracted by mini-css-extract-plugin\nexport var chip = \"styles-module--chip--u1Fvv\";\nexport var blue = \"styles-module--blue--pmeiY\";\nexport var orange = \"styles-module--orange--XDXe2\";\nexport var selected = \"styles-module--selected--1cL7b\";","import React from \"react\"\nimport Chip from \"../chip\"\nimport {\n  list as listStyles,\n  listItem as listItemStyles,\n} from \"./styles.module.css\"\n\nconst PostFilterList = ({ filters, color, onAdd, onRemove }) => {\n  return (\n    <ul className={listStyles}>\n      {filters.map((tag) => (\n        <li className={listItemStyles}>\n          <Chip text={tag} color={color} onAdd={onAdd} onRemove={onRemove} />\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default PostFilterList\n","// extracted by mini-css-extract-plugin\nexport var list = \"styles-module--list--AAV1d\";\nexport var listItem = \"styles-module--list-item--2-ZjA\";","import React, { useState } from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport Layout from \"../../components/layout/\"\nimport RouteTargetHeading from \"../../components/route-target-heading\"\nimport {\n  postList as postListStyles,\n  post as postStyles,\n} from \"./index.module.css\"\nimport PostFilterList from \"../../components/post-filter-list\"\n\nconst Blog = ({data, location}) => {\n  const allPosts = data.allMdx.nodes\n\n  const uniquePostTags = new Set()\n  allPosts.forEach(node => {\n    node.frontmatter.tags.forEach(tag => {\n      uniquePostTags.add(tag)\n    })\n  })\n\n  const [selectedPostTags, setSelectedPostTags] = useState(new Set())\n  const [postsToDisplay, setPostsToDisplay] = useState(allPosts)\n\n  const addFilter = () => filterName => {\n    const newFilterList = selectedPostTags.add(filterName)\n    setSelectedPostTags(newFilterList)\n    setPostsToDisplay(allPosts.filter(shouldPostDisplay))\n  }\n\n  const removeFilter = () => filterName => {\n    const newFilterList = selectedPostTags\n    newFilterList.delete(filterName)\n    setSelectedPostTags(newFilterList)\n    setPostsToDisplay(allPosts.filter(shouldPostDisplay))\n  }\n\n  const shouldPostDisplay = node => {\n    // When no filters are selected, show all posts\n    if (selectedPostTags.size === 0) {\n      return true\n    }\n\n    // Check if one of the node's tags is in the set of selected filters\n    return node.frontmatter.tags.some(tag => selectedPostTags.has(tag))\n  }\n\n  return (\n    <Layout\n      title=\"Blog | Megan Sullivan\"\n      description=\"A list of my latest blog posts\"\n      location={location}\n    >\n      <RouteTargetHeading\n        level={1}\n        targetId=\"navigation\"\n      >\n        Blog\n      </RouteTargetHeading>\n      <PostFilterList\n        filters={Array.from(uniquePostTags).sort()}\n        color=\"orange\"\n        onAdd={addFilter(selectedPostTags, setSelectedPostTags)}\n        onRemove={removeFilter(selectedPostTags, setSelectedPostTags)}\n      />\n      <p aria-live=\"polite\" aria-atomic=\"true\">\n        {postsToDisplay.length} {postsToDisplay.length === 1 ? \"post\" : \"posts\"} found\n      </p>\n      <ol className={postListStyles}>\n        {postsToDisplay.map((node) => (\n          <li className={postStyles}>\n            <h2>\n              <Link to={`/blog/${node.slug}`}>\n                {node.frontmatter.title}\n              </Link>\n            </h2>\n            <p>{`${node.frontmatter.date} | ${node.timeToRead}-minute read`}</p>\n            <p>{node.frontmatter.description || node.excerpt}</p>\n          </li>\n        ))}\n      </ol>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMdx(sort: { fields: frontmatter___date, order: DESC }) {\n      nodes {\n        frontmatter {\n          title\n          date(formatString: \"MMMM Do, YYYY\")\n          description\n          tags\n        }\n        excerpt\n        slug\n        timeToRead\n      }\n    }\n  }\n`\n\nexport default Blog\n","// extracted by mini-css-extract-plugin\nexport var postList = \"index-module--post-list--237US\";\nexport var post = \"index-module--post--9U3gD\";"],"names":["colorStyles","text","color","onAdd","onRemove","useState","isSelected","setIsSelected","type","className","chipStyles","onClick","toString","filters","map","tag","data","location","allPosts","allMdx","nodes","uniquePostTags","Set","forEach","node","frontmatter","tags","add","selectedPostTags","setSelectedPostTags","postsToDisplay","setPostsToDisplay","shouldPostDisplay","size","some","has","title","description","level","targetId","Array","from","sort","filterName","newFilterList","filter","delete","length","to","slug","date","timeToRead","excerpt"],"sourceRoot":""}