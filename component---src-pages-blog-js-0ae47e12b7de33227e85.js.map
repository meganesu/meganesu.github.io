{"version":3,"sources":["webpack://meganesulli.com/./src/components/chip/index.js","webpack://meganesulli.com/./src/components/chip/styles.module.css","webpack://meganesulli.com/./src/components/post-filter-list/index.js","webpack://meganesulli.com/./src/components/post-filter-list/styles.module.css","webpack://meganesulli.com/./src/pages/blog.js","webpack://meganesulli.com/./src/pages/blog.module.css"],"names":["colorStyles","text","color","onAdd","onRemove","useState","isSelected","setIsSelected","type","className","chipStyles","onClick","data-text","aria-pressed","toString","filters","map","tag","allPosts","useStaticQuery","allMarkdownRemark","nodes","uniquePostTags","Set","forEach","node","frontmatter","tags","add","selectedPostTags","setSelectedPostTags","postsToDisplay","setPostsToDisplay","shouldPostDisplay","size","some","has","pageTitle","Array","from","sort","filterName","newFilterList","filter","delete","aria-live","aria-atomic","length","to","fields","slug","title","date","timeToRead","description","excerpt"],"mappings":"oMAQA,IA+BA,EA/BmB,SAAC,GAAsC,IAGpDA,EAHgBC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAAe,GACnBC,eAAS,GAAtCC,EADgD,KACpCC,EADoC,KAWvD,MAPc,SAAVL,EACFF,ECXgB,6BDaC,WAAVE,IACPF,ECbkB,gCDiBlB,0BACEQ,KAAK,SACLC,UAAcC,8BAAcV,EAAnB,KAAkCM,EClBzB,iCDkBuD,IACzEK,QAAS,WACHL,EACFF,EAASH,GAETE,EAAMF,GAERM,GAAeD,IAEjBM,YAAWX,EACXY,eAAcP,EAAWQ,YAExBb,IE3BP,IAYA,EAZuB,SAAC,GAAyC,IAAvCc,EAAsC,EAAtCA,QAASb,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC/C,OACE,sBAAIK,UCRY,8BDSbM,EAAQC,KAAI,SAACC,GAAD,OACX,sBAAIR,UCTY,mCDUd,gBAAC,EAAD,CAAMR,KAAMgB,EAAKf,MAAOA,EAAOC,MAAOA,EAAOC,SAAUA,UEkFjE,EArFa,WACX,IAoBMc,GApBOC,QAAe,cAoBNC,kBAAkBC,MAElCC,EAAiB,IAAIC,IAC3BL,EAASM,SAAQ,SAAAC,GACfA,EAAKC,YAAYC,KAAKH,SAAQ,SAAAP,GAC5BK,EAAeM,IAAIX,SA1BN,OA8B+BZ,cAAS,IAAIkB,KAAtDM,EA9BU,KA8BQC,EA9BR,QA+B2BzB,cAASa,GAA9Ca,EA/BU,KA+BMC,EA/BN,KA8CXC,EAAoB,SAAAR,GAExB,OAA8B,IAA1BI,EAAiBK,MAKdT,EAAKC,YAAYC,KAAKQ,MAAK,SAAAlB,GAAG,OAAIY,EAAiBO,IAAInB,OAGhE,OACE,gBAAC,IAAD,CAAQoB,UAAU,yBAChB,kCACA,gBAAC,EAAD,CACEtB,QAASuB,MAAMC,KAAKjB,GAAgBkB,OACpCtC,MAAM,SACNC,MA7BkB,SAAAsC,GACtB,IAAMC,EAAgBb,EAAiBD,IAAIa,GAC3CX,EAAoBY,GACpBV,EAAkBd,EAASyB,OAAOV,KA2B9B7B,SAxBqB,SAAAqC,GACzB,IAAMC,EAAgBb,EACtBa,EAAcE,OAAOH,GACrBX,EAAoBY,GACpBV,EAAkBd,EAASyB,OAAOV,OAsBhC,qBAAGY,YAAU,SAASC,cAAY,QAC/Bf,EAAegB,OADlB,IACqD,IAA1BhB,EAAegB,OAAe,OAAS,QADlE,UAGA,sBAAItC,UC5Ec,iCD6EfsB,EAAef,KAAI,SAACS,GAAD,OAClB,sBAAIhB,UC7EM,4BD8ER,0BACE,gBAAC,KAAD,CAAMuC,GAAE,SAAWvB,EAAKwB,OAAOC,MAC5BzB,EAAKC,YAAYyB,QAGtB,yBAAO1B,EAAKC,YAAY0B,KAAxB,MAAkC3B,EAAK4B,WAAvC,gBACA,yBAAI5B,EAAKC,YAAY4B,aAAe7B,EAAK8B","file":"component---src-pages-blog-js-0ae47e12b7de33227e85.js","sourcesContent":["import React, { useState } from \"react\"\nimport {\n  chip as chipStyles,\n  selected as selectedStyles,\n  blue as blueStyles,\n  orange as orangeStyles,\n} from \"./styles.module.css\"\n\nconst ToggleChip = ({ text, color, onAdd, onRemove }) => {\n  const [isSelected, setIsSelected] = useState(false)\n\n  let colorStyles\n  if (color === 'blue') {\n    colorStyles = blueStyles\n  }\n  else if (color === 'orange') {\n    colorStyles = orangeStyles\n  }\n\n  return (\n    <button\n      type=\"button\"\n      className={`${chipStyles} ${colorStyles} ${isSelected ? selectedStyles : \"\"}`}\n      onClick={() => {\n        if (isSelected) {\n          onRemove(text)\n        } else {\n          onAdd(text)\n        }\n        setIsSelected(!isSelected)\n      }}\n      data-text={text}\n      aria-pressed={isSelected.toString()}\n    >\n      {text}\n    </button>\n  )\n}\n\nexport default ToggleChip\n","// extracted by mini-css-extract-plugin\nexport const chip = \"styles-module--chip--u1Fvv\";\nexport const blue = \"styles-module--blue--pmeiY\";\nexport const orange = \"styles-module--orange--XDXe2\";\nexport const selected = \"styles-module--selected--1cL7b\";","import React from \"react\"\nimport Chip from \"../chip\"\nimport {\n  list as listStyles,\n  listItem as listItemStyles,\n} from \"./styles.module.css\"\n\nconst PostFilterList = ({ filters, color, onAdd, onRemove }) => {\n  return (\n    <ul className={listStyles}>\n      {filters.map((tag) => (\n        <li className={listItemStyles}>\n          <Chip text={tag} color={color} onAdd={onAdd} onRemove={onRemove} />\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default PostFilterList\n","// extracted by mini-css-extract-plugin\nexport const list = \"styles-module--list--AAV1d\";\nexport const listItem = \"styles-module--list-item--2-ZjA\";","import React, { useState } from \"react\"\nimport { graphql, useStaticQuery, Link } from \"gatsby\"\nimport Layout from \"../components/layout/\"\nimport {\n  postList as postListStyles,\n  post as postStyles,\n} from \"./blog.module.css\"\nimport PostFilterList from \"../components/post-filter-list\"\n\nconst Blog = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(sort: { fields: frontmatter___date, order: DESC }) {\n        nodes {\n          frontmatter {\n            title\n            date(formatString: \"MMMM Do, YYYY\")\n            description\n            tags\n          }\n          excerpt(format: PLAIN)\n          fields {\n            slug\n          }\n          timeToRead\n        }\n      }\n    }\n  `)\n\n  const allPosts = data.allMarkdownRemark.nodes\n\n  const uniquePostTags = new Set()\n  allPosts.forEach(node => {\n    node.frontmatter.tags.forEach(tag => {\n      uniquePostTags.add(tag)\n    })\n  })\n\n  const [selectedPostTags, setSelectedPostTags] = useState(new Set())\n  const [postsToDisplay, setPostsToDisplay] = useState(allPosts)\n\n  const addFilter = () => filterName => {\n    const newFilterList = selectedPostTags.add(filterName)\n    setSelectedPostTags(newFilterList)\n    setPostsToDisplay(allPosts.filter(shouldPostDisplay))\n  }\n\n  const removeFilter = () => filterName => {\n    const newFilterList = selectedPostTags\n    newFilterList.delete(filterName)\n    setSelectedPostTags(newFilterList)\n    setPostsToDisplay(allPosts.filter(shouldPostDisplay))\n  }\n\n  const shouldPostDisplay = node => {\n    // When no filters are selected, show all posts\n    if (selectedPostTags.size === 0) {\n      return true\n    }\n\n    // Check if one of the node's tags is in the set of selected filters\n    return node.frontmatter.tags.some(tag => selectedPostTags.has(tag))\n  }\n\n  return (\n    <Layout pageTitle=\"Blog | Megan Sullivan\">\n      <h1>Blog</h1>\n      <PostFilterList\n        filters={Array.from(uniquePostTags).sort()}\n        color=\"orange\"\n        onAdd={addFilter(selectedPostTags, setSelectedPostTags)}\n        onRemove={removeFilter(selectedPostTags, setSelectedPostTags)}\n      />\n      <p aria-live=\"polite\" aria-atomic=\"true\">\n        {postsToDisplay.length} {postsToDisplay.length === 1 ? \"post\" : \"posts\"} found\n      </p>\n      <ol className={postListStyles}>\n        {postsToDisplay.map((node) => (\n          <li className={postStyles}>\n            <h2>\n              <Link to={`/blog/${node.fields.slug}`}>\n                {node.frontmatter.title}\n              </Link>\n            </h2>\n            <p>{`${node.frontmatter.date} | ${node.timeToRead}-minute read`}</p>\n            <p>{node.frontmatter.description || node.excerpt}</p>\n          </li>\n        ))}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default Blog\n","// extracted by mini-css-extract-plugin\nexport const postList = \"blog-module--post-list--ew5nw\";\nexport const post = \"blog-module--post--1gMVt\";"],"sourceRoot":""}